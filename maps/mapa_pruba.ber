1111111111
1000000001
1000C00001
1P00000001
10000000E1
1111111111


tiles[0][0].column = 1;
tiles[0][0].row = 1;
tiles[0][0].border = 1;
tiles[0][0].type = w;
tiles[0][0].skin = 0;


get_next_line -> line = (1111111111)

line[0] -> tiles[0][0]
line[1] -> tiles[0][1]

   0  1  2  3  4  5
0 [1][1][1][1][1][1]
1 [1][0][C][0][0][1]
2 [ ][ ][ ][ ][ ][ ]  == char **map;
3 [ ][ ][ ][ ][ ][ ]
4 [ ][ ][ ][ ][ ][ ]

   0  1  2  3  4  5
0 [1][0][C][0][0][1]  ==  (char* linea = get_next_line(FD)) 

parseo(juego->map)

   0  1  2  3  4  5
0 [1][1][1][1][1][1]
1 [1][0][C][0][0][1]
2 [1][P][0][0][0][1]  == char **map; map[1][2] == C; map[0] == get_next_line
3 [1][0][0][0][E][1]
4 [1][1][1][1][1][1]

int parseo(char **map)
{
    char *row;
    int   row_number;

    row_number = 0;
    while(row != NULL)
    {
        row = get_next_line("mapa_prueba");
        row_parse(row, row_number, juego);
        row_number++;
    }
}

int row_parse(char *row, int row_number, t_so_long *juego)
{
    int column;
    
    column = 0;
    while (row[column] != \n || != \0)
    {
        juego->map[row_number][column] = row[column];
        column++;
    }
}